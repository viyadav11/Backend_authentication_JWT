@user
params
c
cc
c
cc
c
user
user_login(user)
 user=User.create(username:"vikas",email: 'vikas@gmail.com',password: '123456')
c
@user
params
c
response
response.status
c
user_prm
c
@user
user
c
user
@user
c
user_prm
user_params
user
c
@user
c
 user=User.create(username:"shreesh",email: 'shreesh@gamil.com',password: 'yadav')  
c
@user
c
user=User.create(username:"shreesh",email: 'shreesh@gamil.com',password: 'yadav')  
c
@user
c
 @user
@user.update(user_prm)
exit
c
true
c
user=User.create(username:"vikas",email: 'vikas@gamil.com',password: '123456')
c
@decoded = jwt_decode(header)
header = header.split(" ").last if header
 header = request.headers["Authorization"]
c
 @decoded = jwt_decode(header)
c
 header = request.headers["Authorization"]
c
exit
c
user_login(user)
c
user_login(user)
c
 user_login(user)
c
  expect(JSON.parse(response.body)['username'])
response.body
c
response
c
JSON.parse(response.body)
response.body
response
c
@user
c
response.body
c
response.body
c
user=JSON.parse(response.body).first
usr["username"]
usr=user.first
user.first
user
user.first.["username"]
user.["username"]
user["username"]
user
user=JSON.parse(response.body)
h
h=JSON.parse(response.body)
h
h=JSON.parse(response.body)
h
  h['username']
c
h=JSON.parse(response.body)
h
h["username"]
h["username"}
h=JSON.parse(response.body)
JSON.parse(response.body)
response.body
c
response.body
response
c
user_login(user)
request.headers["Authorization"] = token
c
request.headers["Authorization"] = token
user_login(user)
c
response.body.include?("check method ahs been hit")
response.include?("check method ahs been hit")
response.include("check method ahs been hit")
response.body
response
c
@current_user = User.find(@decoded[:user_id])
 @decoded = jwt_decode(header)
c
header = request.headers["Authorization"]
exit
exir
header.split(" ").last if header
 @current_user = User.find(@decoded[:user_id])
  @decoded = jwt_decode(header)
c
  header = request.headers["Authorization"]
c
request.headers["Authorization"] = JWT.encode(payload, secret)
c
response
c
@decoded = jwt_decode(header)
c
request.headers["Authorization"]
c
request.headers["Authorization"] = JWT.encode(payload, secret)
c
response
c
 request.headers["Authorization"]
c
 request.headers["Authorization"] = JWT.encode(payload, secret)
c
request.headers["Authorization"]
c
request.headers["Authorization"] = JWT.encode(payload, secret)
 request.headers["Authorization"]
request.headers["Authorization"] = JWT.encode(payload, secret)
c
request.headers["Authorization"] 
request.headers["Authorization"] = JWT.encode(payload, secret)
 user_login(user)
c
 user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456')  
c
  header = request.headers["Authorization"]
request.headers["Authorization"]
c
request.headers["Authorization"]
c
token= user_login(user)
c
 request.headers["Authorization"]
c
tokn= user_login(user)
c
  user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456')  
c
response
c
@decoded = jwt_decode(header)
header = header.split(" ").last if header
header = request.headers["Authorization"]
Authorization
c
 tokn
 tokn= user_login(user)
 tokn
user_login(user)
 tokn
c
 user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456') 
c
response
c
h=JSON.parse(response.body)
c
  @user = User.find_by_email(params[:email])
c
 user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456')  
c
h["token"]
 h=JSON.parse(response.body)
c
 tokn= user_login(user)
c
h["token"]
h=JSON.parse(response.body)
c
 tokn= user_login(user)
c
user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456') 
c
h["token"]
 h=JSON.parse(response.body)
c
tokn
tokn= user_login(user)
c
h=JSON.parse(response.body)
c
 tokn= user_login(user)
c
 user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456')  
c
user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456')  
c
h["token"]
h=JSON.parse(response.body)
JSON.parse(response.body.["token"])
JSON.parse(response.body["token"])
JSON.parse(response.body)
response.body
response
response["@header"]
response["header"]
response[header]
response[@header]
response.@header
response.first
response.@buf
response
JSON.parse(response.@buf)
JSON.parse(response)
response
c
 @user = User.find_by_email(params[:email])
c
 user_login(user)
c
 user_login(user)
 user=User.create(username:"abcd",email: 'abcs1@gamil.com',password: '123456')  
c
 post :login, params: { email: 'abcs1@gamil.com',password: '123456'}
c
  @user = User.find_by_email(params[:email])
 @user&.authenticate(params[:password])
c
 post :login, params: { email: 'abcs1@gamil.com',password: '123456'}
c
  post :login, params: { email: 'abcs1@gamil.com',password: '123456'}  
c
 post :login, params: { email: 'abcs1@gamil.com',password: '123456'}  
